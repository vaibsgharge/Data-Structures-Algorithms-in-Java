Question:

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.


There are 2 ways to solve this 1. using Recursion and 2.using Iteration
Solution:

Recursion Approach:


Iteration Approach :

This is basically performing an In-Order Traversal.

- 

Reference : https://github.com/mission-peace/interview/blob/master/src/com/interview/tree/IsBST.java

class Node {

  Node left;
  Node right;
  int data;
  
}

// Recursive Approach
	public boolean isBST(Node root){
        return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }
    
    private boolean isBST(Node root, int min, int max){
        if(root == null){
            return true;
        }
        if(root.data <= min || root.data > max){
            return false;
        }
        return isBST(root.left, min, root.data) && isBST(root.right, root.data, max);
    }

// Iterative Approach

    public boolean isBSTIterative(Node root) {
        if (root == null) {
            return true;
        }

        Deque<Node> stack = new LinkedList<>();
        Node node = root;
        int prev = Integer.MIN_VALUE;
		
        int current;
		
        while ( true ) {
		
            if (node != null) {
                stack.addFirst(node);
                node = node.left;
				
            } else {
                if (stack.isEmpty()) {
                    break;
                }
                node = stack.pollFirst();
                current = node.data;
				
                if (current < prev) {
                    return false;
                }
				
                prev = current;
                node = node.right;
            }
        }
		
        return true;
    }
