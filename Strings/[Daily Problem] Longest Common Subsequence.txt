Question:

Given two strings text1 and text2, return their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). A common subsequence of two strings is a subsequence that is common to both strings.

If there is no common subsequence, return "".


Example 1:

	Input: text1 = "abcde", text2 = "ace" 
	Output: "ace"
	Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:

	Input: text1 = "abc", text2 = "abc"
	Output: "abc"
	Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:

	Input: text1 = "abc", text2 = "def"
	Output: ""
	Explanation: There is no such common subsequence, so the result is "".
 

Constraints:

1 <= text1.length <= 1000
1 <= text2.length <= 1000
The input strings consist of lowercase English characters only.

Solution:

class LongestCommonSubsequence {

    // Function to find length of Longest Common Subsequence of substring
    // X[0..m-1] and Y[0..n-1]
	
    public static String LCSLength(String X, String Y) {
	
        int m = X.length(), n = Y.length();
 
        // lookup table stores solution to already computed sub-problems
        // i.e. T[i][j] stores the length of LCS of substring
        // X[0..i-1] and Y[0..j-1]
        int[][] T = new int[m + 1][n + 1];
 
        // fill the lookup table in bottom-up manner
        for (int i = 1; i <= m; i++)
        {
            for (int j = 1; j <= n; j++)
            {
                // if current character of X and Y matches
                if (X.charAt(i - 1) == Y.charAt(j - 1)) {
                    T[i][j] = T[i - 1][j - 1] + 1;
                }
                // else if current character of X and Y don't match,
                else {
                    T[i][j] = Integer.max(T[i - 1][j], T[i][j - 1]);
                }
            }
        }
 
        // LCS will be last entry in the lookup table
		
		// read the substring out from the matrix
		StringBuffer sb = new StringBuffer();
		
		for (int x = m, y = n; x != 0 && y != 0; ) {
			
			if (a.charAt(x-1) == b.charAt(y-1)) {
				
				sb.append(a.charAt(x-1));
				
				x--;
				y--;
				
			} else if (T[x][y] == T[x-1][y]){
				x--;
				
			} else if (T[x][y] == T[x][y-1]) {
				y--;
			} 
		}
	
        return sb.toString();
    }
 
    // main function
    public static void main(String[] args) {
	
        String X = "XMJYAUZ", Y = "MZJAWXU";
 
        System.out.print("The Longest Common Subsequence is " + LCSLength(X, Y));
    }
}