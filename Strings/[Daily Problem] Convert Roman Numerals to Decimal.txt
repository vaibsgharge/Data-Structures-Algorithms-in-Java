Question:

Given an integer, write a function to return its roman numeral representation.

E.g : 
integerToRoman(1)  = "I"
integerToRoman(4)  = "IV"
integerToRoman(49) = "XLIX"


Roman Numeral	Number
I	1
V	5
X	10
L	50
C	100
D	500
M	1000

Solution:

// Parallel arrays of numerals in descending order and their values. We include any pairs of numerals where a smaller numeral is subtracted from a larger numeral

private static final String[] numerals = new String[] {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
private static final int[] values = new int[] {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
    
public static String integerToRoman(int value) {

    // We are only considering the range for standard roman numerals
	
    if (value > 3999 || value < 1) throw new IllegalArgumentException();
    
    StringBuilder numeral = new StringBuilder();
    int i = 0;
    // Greedily append the largest numeral possible until the value is 0
	
    while (value > 0) {
        if (value - values[i] >= 0) {
            numeral.append(numerals[i]);
            value -= values[i];
        } else {
            i++;
        }
    }
	
    return numeral.toString();
}